apply plugin: 'jacoco'

def excludedFiles = [
        // data binding
        'android/databinding/**/*.class',
        '**/android/databinding/*Binding.class',
        '**/android/databinding/*',
        '**/androidx/databinding/*',
        '**/BR.*',
        // android
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',
        // kotlin
        '**/*MapperImpl*.*',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/BuildConfig.*',
        '**/*Component*.*',
        '**/*BR*.*',
        '**/Manifest*.*',
        '**/*$Lambda$*.*',
        '**/*Companion*.*',
        '**/*Module*.*',
        '**/*Dagger*.*',
        '**/*Hilt*.*',
        '**/*MembersInjector*.*',
        '**/*_MembersInjector.class',
        '**/*_Factory*.*',
        '**/*_Provide*Factory*.*',
        '**/*Extensions*.*',
        // sealed and data classes
        '**/*$Result.*',
        '**/*$Result$*.*',
        // adapters generated by moshi
        '**/*JsonAdapter.*',
]

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/reports/jacoco")
}

tasks.withType(JacocoReport) {
    dependOn testDebugUnitTest
    reports {
        html.enabled = true
        html.destination file("$buildDir/reports/jacoco")
        xml.enabled = true
        xml.destination file("$buildDir/reports/jacoco/index.xml")
    }
}

project.afterEvaluate {
    description = "Generates coverage result files"
    tasks.create(name: "testReport", type: JacocoReport) {
        reports {
            html.enabled = true
            xml.enabled = true
        }
        def classDirectories = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: excludedFiles)
        def sourceDirectories = "$project.projecDir/src/main/java"
        def executionData = fileTree(dir: project.buildDir, includes: ['jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/connected/*coverage.ec'])

        getClassDirectories().setFrom(files[classDirectories])
        getSourceDirectories().setFrom(files([sourceDirectories]))
        getExecutionData().setFrom(files([executionData]))

        if  (!(project.hasProperty('minCoverage') || project.hasProperty('minLineCoverage'))) {
            doLast {
                exec {
                    commandLine 'open', "$buildDir/reports/jacoco/index.html"
                }
            }
        }
    }

    tasks.create(name: "testCoverage", type: JacocoCoverageVerification, dependsOn: "testReport") {
        description = "Generates coverage ratio(./gradlew testCoverage -PminCoverage=0.8)"
        def minCoverage = project.hasProperty('minCoverage') ? new BigDecimal(project.property('minCoverage')) : 0.8
        def minLineCoverage = project.hasProperty('minLineCoverage') ? new BigDecimal(project.property('minLineCoverage')) : 0.8
        violationRules {
            rule {
                limit {
                    minimum = minCoverage
                }
                rule {
                    element = 'CLASS'
                    include = ['org.gradle']
                    limit {
                        counter = 'LINE'
                        value = 'TOTALCOUNT'
                        minimum = minLineCoverage
                    }
                }
            }
        }

        def classDirectories = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: excludedFiles)
        def sourceDirectories = "$project.projecDir/src/main/java"
        def executionData = fileTree(dir: project.buildDir, includes: ['jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/connected/*coverage.ec'])

        getClassDirectories().setFrom(files[classDirectories])
        getSourceDirectories().setFrom(files([sourceDirectories]))
        getExecutionData().setFrom(files([executionData]))
    }
}

android {
    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }
    testOptions {
        /*execution 'ANDROIDX_TEST_ORCHESTRATOR'*/
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }
}



